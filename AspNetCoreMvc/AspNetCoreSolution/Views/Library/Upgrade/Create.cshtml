@using AspNetCoreSolution.Models.Api.Library
@using AspNetCoreSolution.Extensions
@model Upgrade

@{
    ViewBag.Title = "Create";
}

<h2>New upgrade</h2>

<form method="post" asp-controller="Upgrade" asp-action="Create">
    <div class="form-group">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <h3>Title</h3>
        <br />
        <div class="container">
            @Html.EditorFor(m => m.Title)
            @Html.ValidationMessageFor(m => m.Title)
        </div>

        <h3>Images</h3>
        <br />
        <div class="container">
            <div class="row">
                <div class="col-xs-4 col-md-2">
                    @Html.LabelFor(m => m.Preview, "Preview")
                    <br />
                    @Html.EditorFor(m => m.Preview)
                    @Html.ValidationMessageFor(m => m.Preview)
                </div>
            </div>
        </div>

        <h3>Upgrade levels</h3>
        <br />
        <button type="button" class="add" id="add" onclick="RequestNewUpgradeLevel()">+</button>
        <button type="button" class="remove" id="remove" onclick="RemoveUpgradeLevel()">-</button>
        @Html.ValidationMessageFor(m => m.Levels)
        <div class="container" id="itemParent">
            @for (int i = 0; i < Model.Levels.Count(); i++)
            {
                @Html.PartialFor(m => m.Levels[i], "UpgradeLevel", true)
                <br />
            }
        </div>

        <br />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        var baseModelObj = @Html.Raw(Json.Serialize(Model));
        var index;

        function RequestNewUpgradeLevel() {
            if (index == 0 || index == undefined)
                index = baseModelObj.levels.length;

            $.ajax({
                type: "GET",
                url: "NewUpgradeLevel",
                data: { index: index },
                error: function (e) { alert("error:" + e) },
                success: function (partialViewData) {
                    var container = $("#itemParent");
                    container.append(partialViewData);
                    index++;
                }
            });
        }

        function RemoveUpgradeLevel() {
            if (index == 0 || index == undefined)
                index = baseModelObj.levels.length;

            if (index > 0) {
                index--;
                var container = $("#itemParent");
                var contChildren = container.children($(".upgradeLevel"))
                contChildren.last().remove();
            }
        }
    </script>
}
